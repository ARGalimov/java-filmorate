create table IF NOT EXISTS RATING
(
    ID          INTEGER auto_increment,
    NAME        CHARACTER VARYING(10),
    constraint RATING_PK
        primary key (ID)
);

create table IF NOT EXISTS GENRE
(
    ID          INTEGER auto_increment,
    NAME        CHARACTER VARYING(20),
    constraint "GENRE_pk"
        primary key (ID)
);

create table IF NOT EXISTS FILMS
(
    ID           INTEGER generated by default as identity primary key,
    NAME         CHARACTER VARYING(100) not null,
    DESCRIPTION  CHARACTER VARYING(200),
    RELEASE_DATE DATE,
    DURATION     INTEGER,
    ID_RATING    INTEGER,
    constraint "FILM_RATING_null_fk"
        foreign key (ID_RATING ) references RATING
);

create table IF NOT EXISTS FILM_GENRE
(
    ID_FILM  INTEGER,
    ID_GENRE INTEGER,
    constraint "FILM_GENRE_FILM_null_fk"
        foreign key (ID_FILM) references FILMS,
    constraint "FILM_GENRE_GENRE_null_fk"
        foreign key (ID_GENRE) references GENRE
);

create table IF NOT EXISTS USERS
(
    ID       INTEGER generated by default as identity primary key,
    EMAIL    CHARACTER VARYING(30) not null,
    LOGIN    CHARACTER VARYING(50),
    NAME     CHARACTER VARYING(100),
    BIRTHDAY DATE
);

create table IF NOT EXISTS FILM_LIKES
(
    ID_FILM INTEGER,
    ID_USER INTEGER,
    constraint "FILM_USERS_LIKES_FILM_null_fk"
        foreign key (ID_FILM) references FILMS,
    constraint "FILM_USERS_LIKES_USERS_null_fk"
        foreign key (ID_USER) references USERS
);

create table IF NOT EXISTS FRIENDS
(
    ID_USER     INTEGER,
    ID_FRIEND   INTEGER,
    IS_APPROVE  BOOLEAN not null,
    constraint "FRIENDS_USERS_null_fk1"
        foreign key (ID_USER) references USERS,
    constraint "FRIENDS_USERS_null_fk2"
        foreign key (ID_FRIEND) references USERS
);